CLI
===

List Platform.sh CLI options
----------------------------

Run **\`platform list\`** to see all of the available commands.

.. code-block:: console

  $ platform list
    Usage:
      [options] command [arguments]

    Options:
      --help           -h Display this help message.
      --quiet          -q Do not output any message.
      --verbose        -v|vv|vvv Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
  ...

.. note::
   You can preface any command with 'help' to see information about options for that command.

   .. code-block:: console

      $ platform help list
        Usage:
          list [--xml] [--raw] [--format="..."] [namespace]

        Arguments:
          namespace  The namespace name

        Options:
          --xml      To output list as XML
          --raw      To output raw command list
          --format   To output list in other formats (default: "txt")

        Help:
          The list command lists all commands:

            platform list

          You can also display the commands for a specific namespace:

            platform list test

          You can also output the information in other formats by using the --format option:

            platform list --format=xml

          It's also possible to get raw list of commands (useful for embedding command runner):

            platform list --raw


.. _env_delete_cli:

Delete an environment (or branch) in Platform.sh 
------------------------------------------------

This is the process for deleting a child environment.

- deactivate the environment, eg `staging`
- go into your git repository and issue: 'git push origin :staging'

Use commands like this. ::

 platform environment:deactivate --project=4tig4vb5dj123 --environment=myenv
 platform environment:delete --project=4tig4vb5dj123 --environment=myenv


If you will not rebuild this child environment again, you can delete this configuration.

Delete environment configuration
- go into your git repository 
- Push an empty ref to the child environment you wish to delete. Command is git push origin :(environment) eg. 'git push origin :staging'




.. _env_reset:

reset the master environment
----------------------------

Go to your Platform.sh repository and executing these commands. ::

 # git remote add platform-d7 git@github.com:platformsh/platform-drupal.git
 # git fetch --all
 # git push -f origin platform-d7/master:refs/heads/master
 # git reset --hard origin/master

This will destroy your git history.

Use ``drush`` to clean the database.




.. _env_install_master_remote:

install from a remote repository to the master environment
----------------------------------------------------------

Reset the master enviroment by replacing the current code with the contents of a git repo. 

This example uses the Platform.sh `Drupal 7 minimal <https://github.com/platformsh/platform-drupal>`_ repository on Github.

Go to your Platform.sh repository.

Execute these commands. ::

 git remote add platform-d7 git@github.com:platformsh/platform-drupal.git
 git fetch --all
 git push -f origin platform-d7/master:refs/heads/master
 git reset --hard origin/master

This will destroy your git history.

You can use platform drush to clean the database.



.. _ssl:

Add a server certificate
------------------------



AKA x.509 certificate, SSL certificate

Certificates can now be uploaded with the latest version of the Platform CLI client (https://github.com/platformsh/platformsh-cli). They are added as part of the domain:add command, as shown here. ::

 platform domain:add example.com --cert="/etc/ssl/certs/example.crt" --key="/etc/ssl/private/example.key" --chain="/etc/ssl/certs/gd_intermediate.crt"

The paths shown are the local shell paths to your certificate, key and chain files. 
This command will upload the cert and companion files as part of adding the domain to your platform project. 
Any of your routes which point to https://example.com would then serve that certificate rather than the *.us.platform.sh wildcard.



If you want to serve your website with HTTPS, you'll need to upload your SSL certificate and tell Platform to use it.

  .. warning::
    It is currently not supported in the Platform UI so you need to send us a support request.

Once your certificate has been uploaded, you need to update the routes of your project within the Platform UI.

.. figure:: /use-platform.sh/images/routes-setup.png
  :alt: Routes Setup with SSL

  This is an example configuration which will serve ``https://`` with PHP and redirect all request starting with ``http://www` and ``http://`` to ``https://``.

You can also update the routes directly by editing the ``routes.yaml`` :ref:`configuration_files`. 

The output of the configuration above would be:

.. code-block:: console

  http://www.{default}/:
    to: https://{default}/
    type: redirect
  http://{default}/:
    to: https://{default}/
    type: redirect
  https://{default}/:
    cache:
      enabled: true
    rewrite:
      type: drupal
    ssi:
      enabled: true
    type: upstream
    upstream: php:php




.. _env_upload_master:

install from your local repository to the master environment
------------------------------------------------------------

Open a CLI.

Go to your git project folder.

Add your Platform.sh project as a remote. ::

 git remote add YourRemoteName YourProjectID@git.eu.platform.sh:YourProjectID.git

Force push your code. ::

 git push -f YourRemoteName YourBranch
 git reset --hard YourRemoteName/master


.. _API_chrome:

Use Google Chrome web browser to find an API command
----------------------------------------------------

Open chrome.
Open the developer tools pane. View > Developer > Developer tools 
Record application commands. Network > Preserve log

Use the output to form your ``curl`` command. ::

 curl 'https://eu.platform.sh/api/projects/123fqz6qoo123/environments/master/branch' 
 -H 'Authorization: Bearer c9ac3232ff632109a1256bca570089fc5d42d02b' 
 -H 'Origin: https://eu.platform.sh' 
 -H 'Accept-Encoding: gzip,deflate' 
 -H 'Accept-Language: en-US,en;q=0.8' 
 -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36' 
 -H 'Content-Type: application/json;charset=UTF-8' 
 -H 'Accept: application/json, text/plain, */*' 
 -H 'Referer: https://eu.platform.sh/projects/123fqz6qoo123/environments/master' 
 -H 'Cookie: __mauuid=a8e72ace-b946-4d99-a96d-8517f054b0f9; _ga=GA1.2.636361333.1410253391' 
 -H 'Connection: keep-alive' --data-binary '{"name":"anothertest","title":"anothertest"}' --compressed




.. _env_folder_private:

Create a space for files that is not served to the public
---------------------------------------------------------

You have files in Platform.sh that you want to keep private. 
All customers have a folder called /app/private. If you are using Drupal you can see by going to "Administration » Configuration » Media" that we set it automatically (unless you provide your own $conf['file_private_path'] in settings.php).

Create a space for files that is not web mounted

You have files in git but you don't want them to be web mountable. 

Take a look at document_root setting in the documentation. For example, let say your git repository looks like this. ::

 .
 ├── drupal_root
 └── important_files

These are defined by the mounts section in the file named 
`.platform.app.yaml <https://github.com/platformsh/platform-drupal/blob/master/.platform.app.yaml>`_  in the root of your repository. ::

 # The mounts that will be performed when the package is deployed.
 mounts:
     "/public/sites/default/files": "shared:files/files"
     "/tmp": "shared:files/tmp"
     "/private": "shared:files/private"



.. _crontab_crons: 

schedule scripts in a crontab
-----------------------------

Find these lines in your `.platform.app.yaml <https://github.com/platformsh/platform-drupal/blob/master/.platform.app.yaml>`_ file. ::

 # The configuration of scheduled execution.
 crons:
     drupal:
         spec: "*/20 * * * *"
         cmd: "cd public ; drush core-cron"




.. _platform_app_yaml_edit:

edit the .platform.app.yaml configuration file
----------------------------------------------

Your `.platform.app.yaml <https://github.com/platformsh/platform-drupal/blob/master/.platform.app.yaml>`_ file can be found in your local environment. 


.. _platform_app_yaml_whitelist:

extend the files whitelist in .platform.app.yaml
------------------------------------------------

By default, requests for safe files are allowed and requests for unsafe files - such as script that can be used for XSS attacks, are not allowed. 

You can change this whitelist by adding a ``whitelist`` attribute to your file 
`.platform.app.yaml <https://github.com/platformsh/platform-drupal/blob/master/.platform.app.yaml>`_. 

This is the  default list of file types. The list is formatted as an array: [ "html" ]. 
[ "css", "js", "gif", "jpeg", "jpg", "png", "tiff", "wbmp", "ico", "jng", "bmp", "svgz", "midi", "mpega", "mp2", "mp3", "m4a", "ra", "weba", "3gpp", "mp4", "mpeg", "mpe", "ogv", "mov", "webm", "flv", "mng", "asx", "asf", "wmv", "avi", "ogx", "swf", "jar", "ttf", "eot", "woff", "otf", "txt" ].

Add your own list and only keep the extensions you need. ::

 web:
     # my file whitelist
     whitelist: [ "css", "js", "png", "mp3", "mov", "jar", "txt" ]



.. _deployment_hooks:

add a deployment hook to .platform.app.yaml
-------------------------------------------

The ``hooks`` in your 
`.platform.app.yaml <https://github.com/platformsh/platform-drupal/blob/master/.platform.app.yaml>`_  
file (also called: :term:`deployment hooks`) let you define shell commands to run during the deployment process.

The possible values are:

* **build**: triggered during the build of the application. No other services are accessible at this time since the application has not been deployed yet.
* **deploy**: triggered at the end of the deployment process. You can access other services at this stage (MySQL, Solr, Redis...).

After a push, you can see the results of the deployment hooks in the ``/var/log/deploy.log`` file when logging to the environment via SSH. It contains the log of the execution of the deployment hook. For example:

.. code-block::
    console

    [2014-07-03 10:03:51.100476] Launching hook 'cd /app/public ; drush -y updatedb'.

    My_custom_profile  7001  Update 7001: Enable the Platform module.
    Do you wish to run all pending updates? (y/n): y
    Performed update: my_custom_profile_update_7001
    'all' cache was cleared.
    Finished performing updates.





.. _fqdn: 

Add many working FQDNs for one site
-----------------------------------

change on our routes.yaml file (and drupal config or some other stuff?) so that both 
master-1235zxhj2u123.eu.platform.sh and newsite.com are valid working 
routes.

If you want the default URL to also serve your site, add another upstream to your ``routes.yaml`` file (you can also do that directly via the Platform UI). ::

 http://master-1235zxhj2u123.eu.platform.sh/:
   cache:
     enabled: null
   created_at: 2014-08-29 16:16:49.760281
   rewrite:
     type: null
   ssi:
     enabled: null
   type: upstream
   updated_at: 2014-08-29 16:16:49.760419
   upstream: php:php
 http://www.{default}/:
   to: https://www.{default}/
   type: redirect
 http://{default}/:
   to: https://www.{default}/
   type: redirect
 https://{default}/:
   cache:
     enabled: true
   rewrite:
     type: drupal
   ssi:
     enabled: true
   type: upstream
   upstream: php:php



.. _env_test_email: 

enable test environment mail 
----------------------------

Test environment mails can be enabled. By default, non-master environments of Platform.sh are not allowed to send emails. This is done to avoid accidentally sending our emails to actual consumers, when handling databases that are not properly sanitized.

However, you can change the setting through our API. In future we will expose this option in the UI, and add it to the CLI tool.

To enable mail sending from a test environment, you have to be comfortable with running a command like this. ::

 curl -H "Authorization: Bearer <your token>" -H "Content-Type: application/json" https://eu.platform.sh/api/projects/<your project ID>/environments/<your environment> -X PATCH -d '{"enable_smtp": true}'

You must customize those bits between the <angle brackets>.
You must also be able to find your access token, then replace that text "<your token>" with yours. 

The Platform.sh UI uses the access token a lot - if you know how to view a developer console, look for commands like this. ::

 https://eu.platform.sh/api/projects/adffqz6qoo123/subscribe?access_token=12316f38f0fd5f231da0f5ceca19c5f57a735123 

The long string is the access token.



.. _ip_source:

find your outgoing IP address
-----------------------------

find out your outgoing IP address using ``curl ifconfig.me/ip``.

SSH into your environment and run this command. ::

 $ platform ssh --project 123fqz6qoo123 --environment mybranch
 
    ___ _      _    __ 
   | _ \ |__ _| |_ / _|___ _ _ _ __ 
   |  _/ / _` |  _|  _/ _ \ '_| '  \
   |_| |_\__,_|\__|_| \___/_| |_|_|_|
 
  Welcome to Platform.
 
  This is environment mybranch
  of project 123fqz6qoo123.
 
 web@123fqz6qoo123-mybranch--php:~$ curl ifconfig.me/ip
 54.76.137.67
 web@wk5fqz6qoot4u-mybranch--php:~$ exit
 logout
 Connection to ssh.eu.platform.sh closed.
 $

You can also track down reverse DNS. ::

 $ host 54.76.137.67
 67.137.76.54.in-addr.arpa domain name pointer ec2-54-76-137-67.eu-west-1.compute.amazonaws.com.
 $   




.. _permission_denied: 

troubleshoot ‘Permissions denied’ problems 
------------------------------------------

Permissions denied problems can happen for two reasons.
* environment is inactive 
* ssh private key is not added into the ssh-agent


Check that your key is properly added to your SSH agent by running: ssh-add -l.

If not, then make sure you add it by running: ``ssh-add path-to-your-key``.




.. _make_file_custom:

Use a make file that contains custom features that host on another git server
-----------------------------------------------------------------------------
How can I update these easily and have the changes be reflected in platform? 

Target a specific commit ID. Each time you update and push your features to Github, you can update the commit ID to pull the latest changes.




.. _container_rebuild: 

rebuild a container
-------------------
Rebuilding a Platform environment can't be achieved except through pushing a commit. 

You can use a CHANGELOG.txt file and echo a line into it for something to commit.



.. _drush_extra: 

use extra drush flags
---------------------

eg. make use of the --working-copy drush make flag when running platform build? 

The platform build command should pass through the --working-copy option to Drush as of this writing (the 1.1.0 release supported this feature.)

Is there a way to set the default permissions of the files directory to make them group writeable locally. I changed the group of the builds directory to php-fpm's group with the intention of allowing it to make writes, but sites/default/files is not set to 775 after a build.

The files directory is locally created by symlinking your project folder's shared/files/ directory into builds/[buildDir]/sites/default/, which means it should absorb the permissions of the shared/files/ folder. 



.. _git_push_lots:

speed up pushing hundreds of drupal modules
-------------------------------------------

Pushing hundreds of modules to update one remote feature is slow.

Unfortunately, because we don't support git submodules yet, your use case of working on a project that contains other remotely-version-controlled plugins is not very well supported for local development. The Platform team has started some preliminary work on supporting .gitmodules but we don't have any sort of ETA yet.



last update: |today|


